version: '3.8'

services:
  # Frontend React
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hpd-frontend
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:3001/api
    depends_on:
      - backend
      - database
    restart: unless-stopped
    networks:
      - hpd-network

  # Backend API (Node.js/Express)
  backend:
    image: node:18-alpine
    container_name: hpd-backend
    working_dir: /app
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://hpd_user:hpd_password@database:5432/hpd_hospital
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - CORS_ORIGIN=http://localhost:3000
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: >
      sh -c "
        if [ ! -f package.json ]; then
          echo 'Creating basic backend structure...'
          npm init -y
          npm install express cors helmet morgan dotenv jsonwebtoken bcryptjs
          npm install -D nodemon @types/node typescript
        fi
        npm install
        npm run dev || npm start || node server.js
      "
    depends_on:
      - database
    restart: unless-stopped
    networks:
      - hpd-network

  # Base de données PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: hpd-database
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=hpd_hospital
      - POSTGRES_USER=hpd_user
      - POSTGRES_PASSWORD=hpd_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - hpd-network

  # Redis pour la cache et les sessions
  redis:
    image: redis:7-alpine
    container_name: hpd-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    networks:
      - hpd-network

  # pgAdmin pour la gestion de la base de données (optionnel)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: hpd-pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@hpd.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - database
    restart: unless-stopped
    networks:
      - hpd-network
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  hpd-network:
    driver: bridge
